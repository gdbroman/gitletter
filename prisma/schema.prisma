generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Newsletter {
  id                String             @id @default(cuid())
  title             String
  description       String?
  authorId          String             @unique
  author            User               @relation(fields: [authorId], references: [id])
  githubIntegration GithubIntegration?
  issues            Issue[]
  subscribers       Subscriber[]

  @@map("newsletters")
}

model Subscriber {
  id            String     @id @default(cuid())
  email         String
  emailVerified DateTime?  @map("email_verified")
  addedAt       DateTime   @default(now()) @map("created_at")
  newsletterId  String
  newsletter    Newsletter @relation(fields: [newsletterId], references: [id])

  @@map("subscribers")
}

model Issue {
  id          String     @id @default(cuid())
  title       String
  content     String
  authorId    String
  newsletterId String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  sentAt      DateTime?
  author      User       @relation(fields: [authorId], references: [id])
  newsletter  Newsletter @relation(fields: [newsletterId], references: [id])

  @@map("issues")
}

model GithubIntegration {
  id             String      @id @default(cuid())
  installationId String      @unique
  repoName       String?
  repoDir        String?
  repoOwner      String?
  newsletterId    String?     @unique
  newsletter     Newsletter? @relation(fields: [newsletterId], references: [id])

  @@map("github_integrations")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  accounts      Account[]
  issues        Issue[]
  newsletter    Newsletter?
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
